13004, 13350, 13717, 14052)
lightConsumption
lightConsumptionDecreasing <- order(lightConsumption, decreasing=TRUE)
cat("Light Consumption Decreasing: ")
lightConsumptionDecreasing
lightConsumptionCreasing <- order(lightConsumption)
cat("Light Consumption Creasing: ")
lightConsumptionCreasing
lightConsumption
lightConsumptionDecreasing <- order(lightConsumption, decreasing=TRUE)
lightConsumptionDecreasing
lightConsumptionDecreasing <- order(lightConsumption, decreasing=TRUE,
index.return=FALSE)
cat("Light Consumption Decreasing: ")
lightConsumptionDecreasing
lightConsumptionDecreasing <- order(lightConsumption, decreasing=TRUE)
cat("Light Consumption Decreasing: ")
lightConsumptionDecreasing
lightConsumptionDecreasing <- lightConsumption[order(lightConsumption,
decreasing=TRUE)]
cat("Light Consumption Decreasing: ")
lightConsumptionDecreasing
lightConsumptionDecreasing <- lightConsumption[order(lightConsumption,
decreasing=TRUE)]
cat("Light Consumption Decreasing: ")
lightConsumptionDecreasing
lightConsumptionCreasing <- lightConsumption[order(lightConsumption)]
cat("Light Consumption Creasing: ")
lightConsumptionCreasing
lightConsumptionDecreasing <- lightConsumption[order(lightConsumption,
decreasing=TRUE)]
cat("Light Consumption Decreasing: ", lightConsumptionDecreasing)
lightConsumptionCreasing <- lightConsumption[order(lightConsumption)]
cat("Light Consumption Creasing: ", lightConsumptionCreasing)
m <- matrix(c(0, 3949, 3000, 3927,
3949, 0, 1273, 3188,
3000, 1273, 0, 1827,
3927, 3188, 1827, 0), 4, 4)
m
m <- matrix(c(0, 3949, 3000, 3927,
3949, 0, 1273, 3188,
3000, 1273, 0, 1827,
3927, 3188, 1827, 0),
4, 4)
colnames(m) <- c("Atenas", "Madri", "Paris", "Estocolmo")
rownames(m) <- c("Atenas", "Madri", "Paris", "Estocolmo")
m
x <- list(1:5, "Z", TRUE, c("a", "b"))
x
x <- list(1:5, "Z", TRUE, c("a", "b"))
x
x <- list(1:5, "Z", TRUE, c("a", "b"))
x
x <- list(1:5, "Z", TRUE, c("a", "b"))
x
x <- list(1:5, "Z", TRUE, c("a", "b"))
x
x <- list(1:5, "Z", TRUE, c("a", "b"))
x
x <- c(22, 7, 19, 8, 9, 19, 10)
range(x)
x <- c(22, 7, 19, 8, 9, 19, 10)
range(x)
diff(range(x))
lista <- rnorm(10)
lista
mean(lista)
median(lista)
weighted.mean(lista, c(1:10))
sd(lista)
min(lista)
quantile(lista)
min(lista)
summary(lista)
x <- c(22, 7, 19, 8, 9, 19, 10)
range(x)
diff(range(x))
sd(x)
sd(x)/mean(x)*100
> lista <- rnorm(10)
> lista
x <- c(22, 7, 19, 8, 9, 19, 10)
prop.table(x)
prop.table(x)*100
grupoA <- rep("Grupo A", sample(1:100, 1))
grupoB <- rep("Grupo B", sample(1:100, 1))
grupoC <- rep("Grupo C", sample(1:100, 1))
grupos <- sample(c(grupoA, grupoB, grupoC))
table(grupos)
grupoA <- rep("Grupo A", sample(1:100, 1))
grupoB <- rep("Grupo B", sample(1:100, 1))
grupoC <- rep("Grupo C", sample(1:100, 1))
grupos <- sample(c(grupoA, grupoB, grupoC))
table(grupos)
grupoA <- rep("Grupo A", sample(1:100, 1))
grupoB <- rep("Grupo B", sample(1:100, 1))
grupoC <- rep("Grupo C", sample(1:100, 1))
grupos <- sample(c(grupoA, grupoB, grupoC))
table(grupos)
head(iris)
table(iris$Species)
table(iris$Sepal.Length>5.0)
dados <- c(38, 15, 43, 85, 36, 15, 96, 35, 20, 29, 76,
39, 18, 14, 37, 39, 68, 63, 96, 86, 45, 89, 94, 60, 73, 60, 59,
73, 52, 32)
summary(dados)
interv <- seq(0, 100, 25)
interv
classes <- c("0-24", "25-49", "50-74", "75-100")
table(cut(dados, breaks=interv, right=FALSE,
labels=classes))
dados <- c(38, 15, 43, 85, 36, 15, 96, 35, 20, 29, 76, 39, 18,
14, 37, 39, 68, 63, 96, 86, 45, 89, 94, 60, 73, 60, 59, 73, 52, 32)
interv <- seq(0,100,25)
classes <- c("0-24", "25-49", "50-74", "75-100")
t <- table(cut(dados, breaks=interv, right=FALSE,
labels=classes))
plot(t, xlab="Classe", ylab="Frequência")
plot(t, xlab="Classe", ylab="Frequência")
dados <- c(38, 15, 43, 85, 36, 15, 96, 35, 20, 29, 76, 39, 18,
14, 37, 39, 68, 63, 96, 86, 45, 89, 94, 60, 73, 60, 59, 73, 52, 32)
interv <- seq(0,100,25)
classes <- par(mar(c("0-24", "25-49", "50-74", "75-100"))
t <- table(cut(dados, breaks=interv, right=FALSE,
labels=classes))
plot(t, xlab="Classe", ylab="Frequência")
dados <- c(38, 15, 43, 85, 36, 15, 96, 35, 20, 29, 76, 39, 18,
14, 37, 39, 68, 63, 96, 86, 45, 89, 94, 60, 73, 60, 59, 73, 52, 32)
interv <- seq(0,100,25)
classes <- par(mar=c("0-24", "25-49", "50-74", "75-100"))
t <- table(cut(dados, breaks=interv, right=FALSE,
labels=classes))
plot(t, xlab="Classe", ylab="Frequência")
dados <- c(38, 15, 43, 85, 36, 15, 96, 35, 20, 29, 76, 39, 18,
14, 37, 39, 68, 63, 96, 86, 45, 89, 94, 60, 73, 60, 59, 73, 52, 32)
interv <- seq(0,100,25)
classes <- par(mar=c("0-24", "25-49", "50-74", "75-100"))
t <- table(cut(dados, breaks=interv, right=FALSE,
labels=classes))
plot(t, xlab="Classe", ylab="Frequência")
t <- table(cut(dados, breaks=interv, right=FALSE,
labels=classes))
plot(t, xlab="Classe", ylab="Frequência")
### gráficos
dados <- par(mar=c(38, 15, 43, 85, 36, 15, 96, 35, 20, 29, 76, 39, 18,
14, 37, 39, 68, 63, 96, 86, 45, 89, 94, 60, 73, 60, 59, 73, 52, 32))
interv <- seq(0,100,25)
classes <- par(mar=c("0-24", "25-49", "50-74", "75-100"))
t <- table(cut(dados, breaks=interv, right=FALSE,
labels=classes))
plot(t, xlab="Classe", ylab="Frequência")
dados <- c(38, 15, 43, 85, 36, 15, 96, 35, 20, 29, 76, 39, 18,
14, 37, 39, 68, 63, 96, 86, 45, 89, 94, 60, 73, 60, 59, 73, 52, 32)
interv <- seq(0,100,25)
classes <- c("0-24", "25-49", "50-74", "75-100")
t <- table(cut(dados, breaks=interv, right=FALSE,
labels=classes))
plot(t, xlab="Classe", ylab="Frequência")
lista <- rnorm(100)
hist(lista)
### gráfico de dispersão
x <- rnorm(100)
y <- rnorm(100)
plot(x, y)
x <- 1:20
y <- rnorm(20)
plot(x, y, type="1")
x <- 1:20
y <- rnorm(20)
plot(x, y, type="1")
x <- 1:20
y <- rnorm(20)
plot(x, y, type="1")
x <- 1:20
y <- rnorm(20)
plot(x, y, type="1")
x <- 1:20
y <- rnorm(20)
plot(x, y, type="1")
x <- 1:20
y <- rnorm(20)
plot(x, y, type="1")
x <- 1:20
y <- rnorm(20)
plot(x, y, type="1")
x <- 1:20
y <- rnorm(20)
plot(x, y, type="1")
x <- 1:20
y <- rnorm(20)
plot(x, y, type="1")
x <- 1:20
n <- rnorm(20)
plot(x, n, type="1")
x <- 1:20
y <- rnorm(20)
plot(x, y, type="1")
dados <- c(38, 15, 43, 85, 36, 15, 96, 35, 20, 29, 76, 39,
18, 14, 37, 39, 68, 63, 96, 86, 45, 89, 94, 60, 73, 60, 59, 73,
52, 32)
hist(dados, xlab="Valores", ylab="Frequência", main="Meu
Histograma")
n_dados <- 100
v_temp <- sample(0:45, n_dados, replace=T)
v_altitude <- sample(0:1200, n_dados, replace=T)
df <- data.frame(temperatura=v_temp,
altitude=v_altitude)
plot(df$altitude, df$temperatura)
n_dados <- 100
v_temp <- sample(0:45, n_dados, replace=T)
v_obs <- 1:n_dados
df <- data.frame(observacao=v_obs, temperatura=v_temp)
plot(df$observacao, df$temperatura, type="l")
x <- 1:20
y <- rnorm(20)
plot(x, y, type="1")
x <- 1:20
y <- rnorm(20)
plot(x, y, type="l")
n_dados <- 100
v_temp <- sample(0:45, n_dados, replace=T)
v_obs <- 1:n_dados
df <- data.frame(observacao=v_obs, temperatura=v_temp)
plot(df$observacao, df$temperatura, type="l")
n_dados <- 100
v_temp <- sample(0:45, n_dados, replace=T)
v_obs <- 1:n_dados
df <- data.frame(observacao=v_obs, temperatura=v_temp)
plot(df$observacao, df$temperatura, type="l")
n_dados <- 100
v_temp <- sample(0:45, n_dados, replace=T)
v_altitude <- sample(0:1200, n_dados, replace=T)
df <- data.frame(temperatura=v_temp,
altitude=v_altitude)
plot(df$altitude, df$temperatura)
x <- 1:20
y <- rnorm(20)
plot(x, y, type="l")
plot(df$observacao, df$temperatura, type="l")
abline(h=mean(df$temperatura), col="red")
plot(df$observacao, df$temperatura, type="l")
x <- abline(h=mean(df$temperatura), col="red")
x
plot(df$observacao, df$temperatura, type="l")
x <- abline(h=mean(df$temperatura), col="red")
x
plot(df$observacao, df$temperatura, type="l")
abline(h=mean(df$temperatura), col="red")
df <- data.frame(observacao=v_obs, temperatura=v_temp)
plot(df$observacao, df$temperatura, type="l")
### linhas com linha média
plot(df$observacao, df$temperatura, type="l")
abline(h=mean(df$temperatura), col="red")
grupoA <- rep("Grupo A", 30)
grupoB <- rep("Grupo B", 20)
grupoC <- rep("Grupo C", 9)
grupos <- c(grupoA, grupoB, grupoC)
grupos <- table(grupos)
plot(grupos)
n_dados <- 100
v_temp <- sample(0:45, n_dados, replace=T)
v_obs <- 1:n_dados
df <- data.frame(observacao=o_obs, temperatura=v_temp)
barplot(df$temperatura)
pdf(file="aula3.pdf")
n_dados <- 100
v_temp <- sample(0:45, n_dados, replace=T)
v_obs <- 1:n_dados
df <- data.frame(observacao=o_obs, temperatura=v_temp)
barplot(df$temperatura)
dev.off()
pdf(file="aula3.pdf")
n_dados <- 100
v_temp <- sample(0:45, n_dados, replace=T)
v_obs <- 1:n_dados
df <- data.frame(observacao=o_obs, temperatura=v_temp)
barplot(df$temperatura)
dev.off()
pdf(file="teste.pdf")
n_dados <- 100
v_temp <- sample(0:45, n_dados, replace=T)
v_obs <- 1:n_dados
df <- data.frame(observacao=o_obs, temperatura=v_temp)
barplot(df$temperatura)
dev.off()
x <- c(40, 30, 30, 25, 50, 60, 65, 10, 15, 20, 55, 40, 35, 30)
y <- c(1000, 1500, 1200, 1800, 800, 1000, 500, 3000, 2500, 2000, 800, 1500,
2000, 2000)
modelo <- lm(y ~ x)
modelo
summary(modelo)
novos <- data.frame(x=c(10, 20, 30))
predict(modelo, novos)
resid(modelo)
x <- c(6.5,5.8,7.8,8.1,10.4,12.3,13.1,17.4,20.1,24.5,25.5,27.1)
y <- c(1.4,1.5,1.7,1.9,2.1,2.2,2.4,3.2,3.7,4.2,4.8,5.2)
modelo <- lm(y ~ x)
modelo
x <- c(6.5,5.8,7.8,8.1,10.4,12.3,13.1,17.4,20.1,24.5,25.5,27.1)
y <- c(1.4,1.5,1.7,1.9,2.1,2.2,2.4,3.2,3.7,4.2,4.8,5.2)
# gráfico de disperção com reta
plot(x, y)
df <- data.frame(x, y)
df
df <- data.frame(x, y)
df
plot(x, y)
abline(h=mean(df$y), col="red")
df <- data.frame(x, y)
df
plot(df$x, df$y)
abline(h=mean(df$y), col="red")
modelo <- lm(y ~ x)
plot(resid(modelo))
print(rf)
## Instalar o pacote do modelo de trainamento RamdomForest
install.packages("randomForest")
## Instalar o pacote mlbench para obter o banco de dados
install.packages("mlbench")
library(mlbench)
## Instalar pacote caret para usar a fun????o createDataPartition()
install.packages("caret")
library("caret")
## Instalar o pacote e1071 para o treinamento dos modelos
install.packages("e1071")
data(Satellite)
dataset <- Satellite
head(dataset)
indices <- createDataPartition(dataset$classes, p=0.80,
list=FALSE)
treino <- dataset[indices,]
teste <- dataset[-indices,]
set.seed(0)
rf <- train(classes~., data=treino, method="rf") # RamdomForest
svm <- train(classes~., data=treino, method="svmRadial") # SVM
rna <- train(classes~., data=treino, method="nnet",
trace=FALSE)
predict.rf <- predict(rf, teste)
predict.svm <- predict(svm, teste)
predict.rna <- predict(rna, teste)
table(teste$classes)
confusionMatrix(predict.rf, teste$classes)
confusionMatrix(predict.svm, teste$classes)
confusionMatrix(predict.rna, teste$classes)
print(rf)
final_model <- randomForest(classes~., data=dataset, mtry=2, importance=TRUE)
install.packages("randomForest")
install.packages("randomForest")
install.packages("randomForest")
final_model <- randomForest(classes~., data=dataset, mtry=2, importance=TRUE)
final_model <- randomForest(classes~., data=dataset, mtry=2, importance=TRUE)
final_model <- randomForest(classes~., data=dataset, mtry=2, importance=TRUE)
print(rf)
final_model <- randomForest(classes~., data=dataset, ntree=50, mtry=2, importance=TRUE)
library(randomForest)
library(randomForest)
final_model <- randomForest(classes~., data=dataset, mtry=2, importance=TRUE)
final_predict.rf <- predict(final_model, dataset)
confusionMatrix(final_predict.rf, dataset$classes)
final_predict <- predict(final_model, dataset)
confusionMatrix(final_predict, dataset$classes)
print(rf)
head(dataset)
final_predict.rf <- predict(final_model, dataset)
confusionMatrix(final_predict.rf, dataset$classes)
final_predict <- predict(final_model, dataset)
confusionMatrix(final_predict, dataset$classes)
## Instalar o pacote do modelo de trainamento RamdomForest
install.packages("randomForest")
library(randomForest)
## Instalar o pacote mlbench para obter o banco de dados
install.packages("mlbench")
library(mlbench)
## Instalar pacote caret para usar a funcao createDataPartition()
install.packages("caret")
library("caret")
## Instalar o pacote e1071 para o treinamento dos modelos
install.packages("e1071")
library("e1071")
data(Satellite)
dataset <- Satellite
indices <- createDataPartition(dataset$classes, p=0.80,
list=FALSE)
treino <- dataset[indices,]
teste <- dataset[-indices,]
set.seed(0)
rf <- train(classes~., data=treino, method="rf") # RamdomForest
svm <- train(classes~., data=treino, method="svmRadial") # SVM
rna <- train(classes~., data=treino, method="nnet",
trace=FALSE) # RNA
predict.rf <- predict(rf, teste)
predict.svm <- predict(svm, teste)
predict.rna <- predict(rna, teste)
table(teste$classes)
confusionMatrix(predict.rf, teste$classes)  # 0.9245
confusionMatrix(predict.svm, teste$classes) # 0.9112
confusionMatrix(predict.rna, teste$classes)
print(rf)
final_model <- randomForest(classes~., data=dataset, mtry=2, importance=TRUE)
final_predict <- predict(final_model, dataset)
confusionMatrix(final_predict, dataset$classes)
saveRDS(final_model, "rf_satellite_final_model.rds")
setwd("C:/Projects/ia_ufpr/linguagem_r/trabalho_final/1_pesquisa_dados_satelite")
getwd()
save(final_model, file="satellite_commands.RData")
load("C:/Projects/ia_ufpr/linguagem_r/trabalho_final/1_pesquisa_dados_satelite/satellite_commands.RData")
getwd()
dataset <- read.csv("/Projects/ia_ufpr/linguagem_r/trabalho_final/Volumes.csv")
dataset <- read.csv("/Projects/ia_ufpr/linguagem_r/trabalho_final/2_estimativa_volumes_arvores/Volumes.csv")
dataset <- read.csv("/Projects/ia_ufpr/linguagem_r/trabalho_final/2_estimativa_volumes_arvores/Volumes.csv",
header = TRUE, sep = ';', dec = ',')
head(dataset)
dataset <- dataset[-1]
head(dataset)
install.packages("caret")
library("caret")
dataset <- read.csv("/Projects/ia_ufpr/linguagem_r/trabalho_final/2_estimativa_volumes_arvores/Volumes.csv",
header = TRUE, sep = ';', dec = ',')
indexes <- createDataPartition(dataset$VOL, p = 0.80, list = FALSE)
training <- dataset[indexes,]
test <- dataset[-indexes,]
set.seed(0)
rf <- train(classes~., data=training, method="rf") # RamdomForest
svm <- train(classes~., data=training, method="svmRadial") # SVM
nn <- train(classes~., data=training, method="neuralnet", trace=FALSE) # RNA
## O modelo alométrico é dado por: Volume = b0 + b1 * dap2 * H
alom <- nls(VOL ~ b0 + b1 * DAP * DAP * HT, training, start = list(b0 = 0.5, b1 = 0.5)) # SPURR
set.seed(0)
rf <- train(VOL ~., data = train_data, method = 'rf',
trControl = trainControl('cv', number = 10), preProcess = c('center', 'scale')) # RandomForest
svm <- train(VOL ~., data = train_data, method = 'svmRadial',
trControl = trainControl('cv', number = 10), preProcess = c('center', 'scale')) # SVM
nn <- train(VOL ~ ., data = train_data, method = 'neuralnet', linear.output = TRUE, threshold = 0.1,
trControl = trainControl('cv', number = 10), preProcess = c('center', 'scale')) # RNA
## O modelo alométrico é dado por: Volume = b0 + b1 * dap2 * H
alom <- nls(VOL ~ b0 + b1 * DAP * DAP * HT, training, start = list(b0 = 0.5, b1 = 0.5)) # SPURR
set.seed(0)
rf <- train(VOL ~., data = training, method = 'rf',
trControl = trainControl('cv', number = 10), preProcess = c('center', 'scale')) # RandomForest
svm <- train(VOL ~., data = training, method = 'svmRadial',
trControl = trainControl('cv', number = 10), preProcess = c('center', 'scale')) # SVM
nn <- train(VOL ~ ., data = training, method = 'neuralnet', linear.output = TRUE, threshold = 0.1,
trControl = trainControl('cv', number = 10), preProcess = c('center', 'scale')) # RNA
alom <- nls(VOL ~ b0 + b1 * DAP * DAP * HT, training, start = list(b0 = 0.5, b1 = 0.5)) # SPURR
predict.rf <- predict(rf, test)
predict.svm <- predict(svm, test)
predict.nn <- predict(nn, test)
predict.alom <- predict(alom, test)
r2 <- function(observations, predictions) {
return (1 - (sum((test$VOL - predictions) ^ 2) / sum((test$VOL - mean(test$VOL)) ^ 2)))
}
syx <- function(observations, predictions) {
return (sqrt((sum((test$VOL - predictions) ^ 2) / (length(test$VOL) - 2))))
}
syx_percent <- function(observations, predictions) {
return (syx(observations, predictions) / mean(test$VOL) * 100)
}
rf_r2 <- r2(test$VOL, predict.rf)
rf_syx <- syx(test$VOL, predict.rf)
rf_syx_percent <- syx_percent(test$VOL, predict.rf)
# Calcula métricas para o modelo baseado em SVM
svm_r2 <- r2(test$VOL, predict.svm)
svm_syx <- syx(test$VOL, predict.svm)
svm_syx_percent <- syx_percent(test$VOL, predict.svm)
# Calcula métricas para o modelo baseado em Neural Network
nn_r2 <- r2(test$VOL, predict.nn)
nn_syx <- syx(test$VOL, predict.nn)
nn_syx_percent <- syx_percent(test$VOL, predict.nn)
# Calcula métricas para o modelo alométrico de Spurr
alom_r2 <- r2(test_data$VOL, predict.alom)
alom_syx <- syx(test_data$VOL, predict.alom)
alom_syx_percent <- syx_percent(test_data$VOL, predict.alom)
data.frame('RF' = c(rf_r2, rf_syx, rf_syx_percent),
'SVM' = c(svm_r2, svm_syx, svm_syx_percent),
'NN' = c(nn_r2, nn_syx, nn_syx_percent),
'ALOM' = c(alom_r2, alom_syx, alom_syx_percent),
row.names = c('$R^2$', 'Syx','Sxy%'))
install.packages("randomForest")
library(randomForest)
## Instalar o pacote mlbench para obter o banco de dados
install.packages("mlbench")
library(mlbench)
## Instalar pacote caret para usar a funcao createDataPartition()
install.packages("caret")
library("caret")
## Instalar o pacote e1071 para o treinamento dos modelos
install.packages("e1071")
library("e1071")
data(Satellite)
dataset <- Satellite
indexes <- createDataPartition(dataset$classes, p=0.80,
list=FALSE)
training <- dataset[indexes,]
test <- dataset[-indexes,]
set.seed(0)
rf <- train(classes~., data=training, method="rf") # RamdomForest
svm <- train(classes~., data=training, method="svmRadial") # SVM
rna <- train(classes~., data=training, method="nnet",
trace=FALSE) # RNA
library("e1071")
set.seed(0)
rf <- train(classes~., data=training, method="rf") # RamdomForest
svm <- train(classes~., data=training, method="svmRadial") # SVM
rna <- train(classes~., data=training, method="nnet",
trace=FALSE) # RNA
install.packages("e1071")
library("e1071")
install.packages("e1071")
rf <- train(classes~., data=training, method="rf") # RamdomForest
svm <- train(classes~., data=training, method="svmRadial") # SVM
rna <- train(classes~., data=training, method="nnet",
trace=FALSE) # RNA
